-- JOIN 연습문제

-- 1. 주민번호가 70년대 생이면서 성별이 여자이고, 성이 '전'씨인 직원들의
--    사원명, 주민번호, 부서명, 직급명을 조회하시오.

SELECT
	 EMP_NAME
	,EMP_NO
	,DEPT_TITLE 
	,JOB_NAME
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN JOB USING (JOB_CODE)
WHERE EMP_NO LIKE '7%'
--WHERE SUBSTR(EMP_NO,1,2) BETWEEN 70 AND 79
AND SUBSTR(EMP_NO, 8, 1) = '2'
AND EMP_NAME LIKE '전%';

SELECT
	 EMP_NAME
	,EMP_NO
	,DEPT_TITLE 
	,JOB_NAME
FROM EMPLOYEE E, DEPARTMENT, JOB J
WHERE DEPT_CODE = DEPT_ID
AND E.JOB_CODE = J.JOB_CODE
AND EMP_NO LIKE '7%'
AND SUBSTR(EMP_NO, 8, 1) = '2'
--AND SUBSTR(EMP_NO,1,2) BETWEEN 70 AND 79
AND EMP_NAME LIKE '전%';

-- 2. 이름에 '형'자가 들어가는 직원들의 사번, 사원명, 직급명, 부서명을
--    조회하시오.

SELECT 
	 EMP_ID
	,EMP_NAME 
	,JOB_NAME
	,DEPT_TITLE
FROM EMPLOYEE
NATURAL JOIN JOB
--JOIN JOB USING (JOB_CODE)
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE EMP_NAME LIKE '%형%';

SELECT 
	 EMP_ID
	,EMP_NAME 
	,JOB_NAME
	,DEPT_TITLE
FROM EMPLOYEE E, JOB J, DEPARTMENT
WHERE E.JOB_CODE = J.JOB_CODE
AND DEPT_CODE = DEPT_ID
AND EMP_NAME LIKE '%형%';

-- 3. 해외영업 1부, 2부에 근무하는 사원의 사원명, 직급명, 부서코드, 부서명을
--    조회하시오.

SELECT 
	 EMP_NAME
	,JOB_NAME
	,DEPT_CODE
	,DEPT_TITLE
FROM EMPLOYEE
JOIN JOB USING (JOB_CODE)
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE DEPT_TITLE IN ('해외영업1부', '해외영업2부');

SELECT 
	 EMP_NAME
	,JOB_NAME
	,DEPT_CODE
	,DEPT_TITLE
FROM EMPLOYEE E, JOB J, DEPARTMENT
WHERE E.JOB_CODE = J.JOB_CODE
AND DEPT_CODE = DEPT_ID
AND DEPT_TITLE IN ('해외영업1부', '해외영업2부');

-- 4. 보너스포인트를 받는 직원들의 사원명, 보너스포인트, 부서명, 근무지역명을
--    조회하시오.

SELECT 
	 EMP_NAME
	,BONUS
	,DEPT_TITLE
	,LOCAL_NAME
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
LEFT JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE)
WHERE BONUS IS NOT NULL;

SELECT 
	 EMP_NAME
	,BONUS
	,DEPT_TITLE
	,LOCAL_NAME
FROM EMPLOYEE, DEPARTMENT, LOCATION
WHERE DEPT_CODE = DEPT_ID (+)
AND LOCATION_ID = LOCAL_CODE (+)
AND BONUS IS NOT NULL;

-- 5. 부서가 있는 사원의 사원명, 직급명, 부서명, 지역명 조회

SELECT 
	 EMP_NAME
	,JOB_NAME
	,DEPT_TITLE
	,LOCAL_NAME
FROM EMPLOYEE
JOIN JOB USING (JOB_CODE)
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE);

SELECT 
	 EMP_NAME
	,JOB_NAME
	,DEPT_TITLE
	,LOCAL_NAME
FROM EMPLOYEE E, JOB J, DEPARTMENT, LOCATION
WHERE E.JOB_CODE = J.JOB_CODE
AND DEPT_CODE = DEPT_ID
AND LOCATION_ID = LOCAL_CODE;

-- 6. 급여등급별 최소급여(MIN_SAL)를 초과해서 받는 직원들의 사원명, 직급명,
--    급여, 연봉(보너스포함)을 조회하시오. (연봉에 보너스포인트를 적용하시오.)

SELECT
	 EMP_NAME
	,JOB_NAME
	,SALARY 
	,SALARY * ( 1 + NVL(BONUS,0)) *12 연봉
	--,DECODE(BONUS, NULL, SALARY * 12, SALARY * 12 * BONUS) 연봉
FROM EMPLOYEE
JOIN JOB USING (JOB_CODE)
JOIN SAL_GRADE USING (SAL_LEVEL)
WHERE SALARY > MIN_SAL;

SELECT
	 EMP_NAME
	,JOB_NAME
	,SALARY 
	,DECODE(BONUS, NULL, SALARY * 12, SALARY * 12 * BONUS) 연봉
FROM EMPLOYEE E, JOB J, SAL_GRADE SG
WHERE E.JOB_CODE = J.JOB_CODE
AND E.SAL_LEVEL = SG.SAL_LEVEL 
AND SALARY > MIN_SAL;;

-- 7. 한국(KO)과 일본(JP)에 근무하는 직원들의 사원명, 부서명, 지역명, 국가명을
--    조회하시오.

SELECT 
 	 EMP_NAME
 	,DEPT_TITLE
 	,LOCAL_NAME
 	,NATIONAL_CODE
 	,NATIONAL_NAME
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE)
JOIN NATIONAL USING (NATIONAL_CODE)
WHERE NATIONAL_CODE IN ('KO', 'JP');

SELECT 
 	 EMP_NAME
 	,DEPT_TITLE
 	,LOCAL_NAME
 	,L.NATIONAL_CODE
 	,NATIONAL_NAME
FROM EMPLOYEE, DEPARTMENT, LOCATION L, "NATIONAL" N
WHERE DEPT_CODE = DEPT_ID
AND LOCATION_ID = LOCAL_CODE
AND L.NATIONAL_CODE = N.NATIONAL_CODE
AND L.NATIONAL_CODE IN ('KO', 'JP');

-- 8. 같은 부서에 근무하는 직원들의 사원명, 부서코드, 동료이름을
--    조회하시오.(SELF JOIN 사용)

SELECT
	 E1.EMP_NAME
	,E1.DEPT_CODE
	,E2.EMP_NAME 동료이름
FROM EMPLOYEE E1
JOIN EMPLOYEE E2 ON (E1.DEPT_CODE = E2.DEPT_CODE)
WHERE E1.EMP_NAME != E2.EMP_NAME
ORDER BY E1.EMP_NAME, DEPT_CODE;

SELECT
	 E1.EMP_NAME
	,E1.DEPT_CODE
	,E2.EMP_NAME 동료이름
FROM EMPLOYEE E1, EMPLOYEE E2
WHERE E1.DEPT_CODE = E2.DEPT_CODE
AND E1.EMP_NAME != E2.EMP_NAME;

-- 9. 보너스포인트가 없는 직원들 중에서 직급코드가 J4와 J7인 직원들의 사원명,
--    직급명, 급여를 조회하시오. (단, JOIN, IN 사용할 것)

SELECT 
	 EMP_NAME
	,JOB_NAME
	,SALARY 
FROM EMPLOYEE
JOIN JOB USING(JOB_CODE)
WHERE BONUS IS NULL
AND JOB_CODE IN ('J4','J7');

SELECT 
	 EMP_NAME
	,JOB_NAME
	,SALARY 
FROM EMPLOYEE E, JOB J
WHERE E.JOB_CODE = J.JOB_CODE
AND BONUS IS NULL
AND E.JOB_CODE IN ('J4','J7');